<!DOCTYPE html>

<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>PSI Dashboard</title>

  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">

  <style>
    html {
      box-sizing: border-box;
    }

    *, *:before, *:after {
      box-sizing: inherit;
    }

    body {
      font-family: 'Roboto', sans-serif;
    }

    .app {
      width: 960px;
      margin: 0 auto;
    }

    .app__urls-table {
      margin-bottom: 20px;
    }

    .apex-chart-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    .apex-chart {
      width: 475px;
      padding: 10px;
      margin-bottom: 10px;

      border: 1px solid #E4E4E4;
      border-radius: 2px;
    }


    .urls-table {
      border-collapse: collapse;
      table-layout: fixed;
      width: 100%;

      border-radius: 2px;
    }

    .urls-table,
    .urls-table th,
    .urls-table td {
      border: 1px solid #E4E4E4;
    }

    .urls-table th:first-child {
      width: 300px;
    }

    .urls-table th {
      padding: 5px 0;

      font-size: 12px;
      line-height: 14px;
      text-align: center;
    }

    .urls-table td {
      width: 20px;
      padding: 5px;
    }

    .urls-table td:not(:first-child) {
      text-align: center;
    }

    .urls-table__url {
      font-size: 14px;
      line-height: 18px;

      word-wrap: break-word;
      cursor: pointer;
    }

    /* Since apex charts doesn't support showing toolbar on hover
    let's make a hack: */
    .apexcharts-toolbar {
      display: none !important;
    }

    .apex-chart:hover .apexcharts-toolbar {
      display: flex !important;
    }
  </style>
</head>

<body>
  <div id="app" class="app">
    <div class="app__urls-table">
      <urls-table></urls-table>
    </div>

    <div class="app__charts">
      <apex-chart></apex-chart>
    </div>
  </div>

  <template id="urls-table">
    <table class="urls-table">
      <thead>
        <tr>
          <th rowspan="2">URL</th>

          <th colspan="5">Mobile</th>

          <th colspan="5">Desktop</th>
        </tr>

        <tr>
          <th>Speed Index</th>
          <th>First Contentful Paint</th>
          <th>Time To Interactive</th>
          <th>First Meaningful Paint</th>
          <th>First CPU Idle</th>

          <th>Speed Index</th>
          <th>First Contentful Paint</th>
          <th>Time To Interactive</th>
          <th>First Meaningful Paint</th>
          <th>First CPU Idle</th>
        </tr>
      </thead>

      <tbody>
        <tr v-for="(urlData, url) in urls">
          <td v-on:click="setCurrentUrl(url)" class="urls-table__url">
            {{ url }}
          </td>

          <td v-for="metric in metrics">
            {{ latestMetric(url, "mobile", metric) }}
          </td>

          <td v-for="metric in metrics">
            {{ latestMetric(url, "desktop", metric) }}
          </td>
        </tr>
      </tbody>
    </table>
  </template>

  <template id="apex-chart">
    <div class="apex-chart-container">
    </div>
  </template>

  <script src="https://unpkg.com/vue"></script>
  <script src="https://cdn.jsdelivr.net/npm/apexcharts@latest"></script>

  <script>
    window.Apex = {
      chart: {
        height: 160,
        fontFamily: 'Roboto, sans-serif'
      },
      dataLabels: {
        enabled: false
      },
      stroke: {
        curve: 'straight'
      },
      toolbar: {
        tools: {
          selection: false
        }
      },
      markers: {
        size: 6,
        hover: {
          size: 10
        }
      },
      tooltip: {
        followCursor: false,
        theme: 'dark',
        x: {
          show: false
        },
        marker: {
          show: false
        },
        y: {
          title: {
            formatter: function() {
              return ''
            }
          }
        }
      },
      grid: {
        clipMarkers: false
      },
      yaxis: {
        tickAmount: 2
      },
      xaxis: {
        type: 'datetime'
      },
    }
  </script>

  <script>
    var reportData = <%= psi_data.to_json %>;
  </script>

  <script>
    var globalData = {
      urls: reportData,
      currentUrl: Object.keys(reportData)[0],
      deviceTypes: [
        "mobile",
        "desktop"
      ],
      metrics: [
        "speed_index",
        "first_contentful_paint",
        "time_to_interactive",
        "first_meaningful_paint",
        "first_cpu_idle"
      ],
      chartOptions: {
        speed_index: {
          yaxis: {
            min: 0,
            max: 100
          }
        }
      }
    };

    Vue.component('urls-table', {
      template: '#urls-table',
      data: function() {
        return globalData
      },
      methods: {
        setCurrentUrl(url) {
          this.currentUrl = url;
        },
        latestMetric(url, deviceType, metricName) {
          var urlData = this.urls[url][deviceType];

          var latestTimestamp = Object.keys(urlData).sort(function(a, b){
            return new Date(b) - new Date(a);
          })[0];

          return urlData[latestTimestamp][metricName];
        }
      }
    });

    Vue.component('apex-chart', {
      template: '#apex-chart',
      data: function() {
        return globalData
      },
      methods: {
        plotUrlData() {
          var url = this.currentUrl;
          var metrics = this.metrics;
          var urlReport = this.urls[url];
          var deviceTypes = this.deviceTypes;
          var $charts = document.querySelector(".apex-chart-container");
          var chartOptions = this.chartOptions;

          var maxValue = function(deviceType, metric) {
            var values = Object.keys(urlReport[deviceType]).map(function(timestamp) {
              return urlReport[deviceType][timestamp][metric];
            });

            return Math.max(...values);
          };

          var outputDeviceMetric = function(deviceType, metric) {
            var timeline = Object.keys(urlReport[deviceType]).map(function(timestamp) {
              return [new Date(timestamp), urlReport[deviceType][timestamp][metric]];
            });

            var optionsLine = {
              chart: {
                id: deviceType + '-' + metric,
                group: url,
                type: 'line',
                toolbar: {
                  show: true,
                  tools: {
                    download: true,
                    selection: false,
                    zoom: true,
                    zoomin: false,
                    zoomout: false,
                    pan: false,
                    reset: true
                  }
                }
              },
              title: {
                text: deviceType + ' - ' + metric
              },
              colors: ['#008FFB'],
              series: [{
                data: timeline
              }],
              yaxis: {
                min: 0,
                max: maxValue(deviceType, metric) + 1,
                labels: {
                  minWidth: 40
                },
                decimalsInFloat: 1
              }
            };

            if(chartOptions[metric]) {
              optionsLine = {
                ...optionsLine,
                ...chartOptions[metric]
              }
            }

            var $chartContainer = document.querySelector(`.apex-chart[data-device-type="${deviceType}"][data-metric="${metric}"]`);

            $chart = document.createElement('div');

            if($chartContainer) {
              $chartContainer.innerHTML = '';
            } else {
              $chartContainer = document.createElement('div');
              $chartContainer.className = "apex-chart"
              $chartContainer.setAttribute('data-device-type', deviceType);
              $chartContainer.setAttribute('data-metric', metric);
              $charts.appendChild($chartContainer);
            }

            $chartContainer.appendChild($chart);

            var chartLine = new ApexCharts(
              $chart,
              optionsLine
            );

            chartLine.render();
          }

          metrics.forEach(function(metric) {
            outputDeviceMetric("mobile", metric);
            outputDeviceMetric("desktop", metric);
          });
        }
      },
      watch: {
      	currentUrl: function() {
          this.plotUrlData();
        }
      },
      mounted() {
        this.plotUrlData();
      }
    });

    new Vue({
      el: '#app',
      data: globalData
    });
  </script>
</body>

</html>
